apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    events {
      worker_connections 1024;
    }

    http {
      # ใช้ Kubernetes DNS resolver
      resolver kube-dns.kube-system.svc.cluster.local valid=10s;
      
      # เพิ่ม upstream blocks สำหรับ dynamic DNS resolution
      upstream frontend {
        server myapp.default.svc.cluster.local:5173;
        keepalive 32;
      }
      
      upstream backend {
        server myapp.default.svc.cluster.local:5000;
        keepalive 32;
      }

      server {
        listen 80;
        
        # Frontend (React/Vue/etc.)
        location / {
          # ใช้ตัวแปรเพื่อ dynamic DNS resolution
          set $frontend_upstream "myapp.default.svc.cluster.local:5173";
          proxy_pass http://$frontend_upstream;
          
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          # สำหรับ WebSocket support (หาก frontend ใช้ hot reload)
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          
          # Timeout settings
          proxy_connect_timeout 30s;
          proxy_send_timeout 30s;
          proxy_read_timeout 30s;
        }

        # Backend API
        location /api {
          set $backend_upstream "myapp.default.svc.cluster.local:5000";
          proxy_pass http://$backend_upstream;
          
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          # API timeout settings
          proxy_connect_timeout 30s;
          proxy_send_timeout 60s;
          proxy_read_timeout 60s;
        }

        # Health check endpoint
        location /health {
          access_log off;
          return 200 "healthy\n";
          add_header Content-Type text/plain;
        }
        
        # Nginx status (optional)
        location /nginx_status {
          stub_status on;
          access_log off;
          allow 127.0.0.1;
          allow 10.0.0.0/8;
          deny all;
        }
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy
  labels:
    app: nginx-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-proxy
  template:
    metadata:
      labels:
        app: nginx-proxy
    spec:
      # เพิ่ม init container เพื่อรอให้ myapp service พร้อม
      initContainers:
      - name: wait-for-myapp
        image: busybox:1.35
        command: 
        - sh
        - -c
        - |
          echo "Waiting for myapp service..."
          until nslookup myapp.myapp-ns.svc.cluster.local; do 
            echo "Service not ready, waiting..."
            sleep 5
          done
          echo "Service is ready!"
      containers:
      - name: nginx
        image: nginx:1.27-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        # Resource limits
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: nginx-config-volume
        configMap:
          name: nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-proxy
  labels:
    app: nginx-proxy
spec:
  selector:
    app: nginx-proxy
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP

---
# Optional: Ingress สำหรับ external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-proxy-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: your-domain.com  # เปลี่ยนเป็น domain ของคุณ
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-proxy
            port:
              number: 80